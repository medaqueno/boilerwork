# This docker-compose.yml file shows how Supervisor program(s) are reloaded automatically when file changes detected
# under web root /var/www. There are two environment variables used:
#     1. AUTORELOAD_PROGRAMS: space-separated Supervisor program(s) to be reloaded when file changes detected. e.g.,
#            AUTORELOAD_PROGRAMS: "swoole"       # Autoreload Supervisor program "swoole" only.
#            AUTORELOAD_PROGRAMS: "swoole nginx" # Autoreload Supervisor program "swoole" and "nginx".
#     2. AUTORELOAD_ANY_FILES: Optional. If set to "true", "1", "yes", or "y", reload Supervisor program(s) when any
#        files under the root directory (/var/www in this example) is changed; otherwise, reload only when PHP file(s)
#        are changed.
#
version: "3"

services:
  boilerwork-basic:
    container_name: boilerwork-basic
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    ports:
      - 4000:9501
    environment:
      AUTORELOAD_PROGRAMS: "swoole"
      AUTORELOAD_ANY_FILES: 0
    volumes:
      - ..:/var/www
    networks:
      - app-network

  postgres:
    image: postgres:14.2
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data:delegated
      # - ./data:/var/lib/postgresql/data
      # - ./data/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - app-network

  redis-boiler:
    image: redis:7.0.2-alpine3.16
    container_name: redis-boiler
    restart: always
    ports:
      - 6380:6379
    volumes:
      - redis-data:/data
    networks:
      - app-network

  zoo1:
    image: confluentinc/cp-zookeeper:7.1.1
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - app-network
  kafka1:
    image: confluentinc/cp-kafka:7.1.1
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: unless-stopped
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:19092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181
    networks:
      - app-network

volumes:
  postgres-data:
    external: false
  redis-data:
    external: false

networks:
  app-network:
    driver: bridge
